//quanli bai viet. H∆∞∆°ng
// üìÅ server/controllers/postController.js
import { db } from "../config/connectBD.js";
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

// __dirname t∆∞∆°ng ƒë∆∞∆°ng trong modules ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const UPLOADS_DIR = path.join(__dirname, '../uploads');

// ‚úÖ 1. T·∫°o b√†i vi·∫øt m·ªõi
export const createPost = (req, res) => {
  const { title, content, author_id, slug } = req.body;
  const thumbnail = req.file ? req.file.filename : null; // L·∫•y t√™n file thumbnail n·∫øu c√≥

  if (!title || !content || !author_id || !slug) {
    // N·∫øu thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc, x√≥a thumbnail ƒë√£ upload (n·∫øu c√≥)
    if (thumbnail) {
      fs.unlink(path.join(UPLOADS_DIR, thumbnail), (err) => {
        if (err) console.error('L·ªói khi x√≥a thumbnail kh√¥ng s·ª≠ d·ª•ng:', err);
      });
    }
    return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ, n·ªôi dung, t√°c gi·∫£ v√† ƒë∆∞·ªùng d·∫´n." });
  }

  // Ki·ªÉm tra slug c√≥ tr√πng kh√¥ng
  db.query("SELECT COUNT(*) AS count FROM posts WHERE slug = ?", [slug], (err, result) => {
    if (err) {
      console.error('L·ªói khi ki·ªÉm tra slug:', err);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi ki·ªÉm tra ƒë∆∞·ªùng d·∫´n." });
    }
    if (result[0].count > 0) {
      // N·∫øu tr√πng, x√≥a thumbnail ƒë√£ upload
      if (thumbnail) {
        fs.unlink(path.join(UPLOADS_DIR, thumbnail), (err) => {
          if (err) console.error('L·ªói khi x√≥a thumbnail tr√πng slug:', err);
        });
      }
      return res.status(409).json({ message: "ƒê∆∞·ªùng d·∫´n (slug) n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n kh√°c." });
    }

    const sql = `
      INSERT INTO posts (title, content, thumbnail, author_id, slug)
      VALUES (?, ?, ?, ?, ?)
    `;
    db.query(sql, [title, content, thumbnail, author_id, slug], (err, dbResult) => {
      if (err) {
        console.error('L·ªói khi t·∫°o b√†i vi·∫øt:', err);
        // N·∫øu c√≥ l·ªói, x√≥a thumbnail ƒë√£ upload
        if (thumbnail) {
          fs.unlink(path.join(UPLOADS_DIR, thumbnail), (err) => {
            if (err) console.error('L·ªói khi x√≥a thumbnail sau khi l·ªói DB:', err);
          });
        }
        return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi t·∫°o b√†i vi·∫øt." });
      }
      res.status(201).json({ message: "‚úÖ T·∫°o b√†i vi·∫øt th√†nh c√¥ng!", post_id: dbResult.insertId });
    });
  });
};

// ‚úÖ 2. L·∫•y t·∫•t c·∫£ b√†i vi·∫øt
export const getAllPosts = (req, res) => {
  const { search, limit, offset } = req.query; // Th√™m t√¨m ki·∫øm, ph√¢n trang

  let sql = "SELECT * FROM posts";
  const params = [];

  if (search) {
    sql += " WHERE title LIKE ? OR content LIKE ?";
    params.push(`%${search}%`, `%${search}%`);
  }

  sql += " ORDER BY created_at DESC"; // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t

  if (limit) {
    sql += " LIMIT ?";
    params.push(parseInt(limit));
  }
  if (offset) {
    sql += " OFFSET ?";
    params.push(parseInt(offset));
  }

  db.query(sql, params, (err, result) => {
    if (err) {
      console.error('L·ªói khi l·∫•y t·∫•t c·∫£ b√†i vi·∫øt:', err);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y b√†i vi·∫øt." });
    }
    res.json(result);
  });
};

// ‚úÖ 3. L·∫•y chi ti·∫øt b√†i vi·∫øt theo ID
export const getPostById = (req, res) => {
  const { id } = req.params;
  db.query("SELECT * FROM posts WHERE post_id = ?", [id], (err, result) => {
    if (err) {
      console.error('L·ªói khi l·∫•y b√†i vi·∫øt theo ID:', err);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y b√†i vi·∫øt." });
    }
    if (result.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt." });
    }
    res.json(result[0]);
  });
};

// ‚úÖ 4. L·∫•y chi ti·∫øt b√†i vi·∫øt theo Slug
export const getPostBySlug = (req, res) => {
  const { slug } = req.params;
  db.query("SELECT * FROM posts WHERE slug = ?", [slug], (err, result) => {
    if (err) {
      console.error('L·ªói khi l·∫•y b√†i vi·∫øt theo Slug:', err);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y b√†i vi·∫øt." });
    }
    if (result.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt v·ªõi ƒë∆∞·ªùng d·∫´n n√†y." });
    }
    res.json(result[0]);
  });
};

// ‚úÖ 5. C·∫≠p nh·∫≠t b√†i vi·∫øt
export const updatePost = (req, res) => {
  const { id } = req.params;
  const { title, content, author_id, slug } = req.body;
  const newThumbnail = req.file ? req.file.filename : undefined; // undefined n·∫øu kh√¥ng c√≥ file m·ªõi

  // 1. L·∫•y th√¥ng tin b√†i vi·∫øt hi·ªán c√≥ ƒë·ªÉ ki·ªÉm tra slug v√† thumbnail c≈©
  db.query("SELECT thumbnail, slug FROM posts WHERE post_id = ?", [id], (err, results) => {
    if (err) {
      console.error('L·ªói khi l·∫•y th√¥ng tin b√†i vi·∫øt c≈© ƒë·ªÉ c·∫≠p nh·∫≠t:', err);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t b√†i vi·∫øt." });
    }
    if (results.length === 0) {
      // N·∫øu kh√¥ng t√¨m th·∫•y b√†i vi·∫øt, x√≥a thumbnail m·ªõi n·∫øu c√≥
      if (newThumbnail) {
        fs.unlink(path.join(UPLOADS_DIR, newThumbnail), (unlinkErr) => {
          if (unlinkErr) console.error('L·ªói khi x√≥a thumbnail kh√¥ng s·ª≠ d·ª•ng:', unlinkErr);
        });
      }
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t." });
    }

    const oldThumbnail = results[0].thumbnail;
    const oldSlug = results[0].slug;
    const finalThumbnail = newThumbnail !== undefined ? newThumbnail : oldThumbnail; // Gi·ªØ thumbnail c≈© n·∫øu kh√¥ng c√≥ thumbnail m·ªõi

    // 2. Ki·ªÉm tra slug m·ªõi (n·∫øu c√≥ thay ƒë·ªïi v√† tr√πng v·ªõi slug kh√°c)
    if (slug && slug !== oldSlug) {
      db.query("SELECT COUNT(*) AS count FROM posts WHERE slug = ? AND post_id != ?", [slug, id], (err, slugCheckResult) => {
        if (err) {
          console.error('L·ªói khi ki·ªÉm tra slug tr√πng l·∫∑p khi c·∫≠p nh·∫≠t:', err);
          return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi ki·ªÉm tra ƒë∆∞·ªùng d·∫´n." });
        }
        if (slugCheckResult[0].count > 0) {
          if (newThumbnail) {
            fs.unlink(path.join(UPLOADS_DIR, newThumbnail), (unlinkErr) => {
              if (unlinkErr) console.error('L·ªói khi x√≥a thumbnail tr√πng slug:', unlinkErr);
            });
          }
          return res.status(409).json({ message: "ƒê∆∞·ªùng d·∫´n (slug) n√†y ƒë√£ t·ªìn t·∫°i cho b√†i vi·∫øt kh√°c. Vui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n kh√°c." });
        }
        // Ti·∫øp t·ª•c c·∫≠p nh·∫≠t sau khi ki·ªÉm tra slug
        executePostUpdate(title, content, finalThumbnail, author_id, slug, id, oldThumbnail, res);
      });
    } else {
      // Kh√¥ng c√≥ slug m·ªõi ho·∫∑c slug kh√¥ng thay ƒë·ªïi, ti·∫øn h√†nh c·∫≠p nh·∫≠t lu√¥n
      executePostUpdate(title, content, finalThumbnail, author_id, slug, id, oldThumbnail, res);
    }
  });
};

// H√†m n·ªôi b·ªô ƒë·ªÉ th·ª±c hi·ªán vi·ªác c·∫≠p nh·∫≠t th·ª±c t·∫ø
const executePostUpdate = (title, content, finalThumbnail, author_id, slug, id, oldThumbnail, res) => {
  const sql = `
    UPDATE posts
    SET title = ?, content = ?, thumbnail = ?, author_id = ?, slug = ?, updated_at = CURRENT_TIMESTAMP
    WHERE post_id = ?
  `;
  // S·ª≠ d·ª•ng slug m·ªõi n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng slug c≈© (ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra)
  const params = [title, content, finalThumbnail, author_id, slug || oldThumbnail, id]; // Fix: slug || oldThumbnail l√† sai, ph·∫£i l√† slug || oldSlug

  // L·∫•y slug c≈© t·ª´ k·∫øt qu·∫£ query ban ƒë·∫ßu n·∫øu slug m·ªõi l√† null/undefined
  db.query("SELECT slug FROM posts WHERE post_id = ?", [id], (err, oldSlugResult) => {
    if (err) {
        console.error('L·ªói khi l·∫•y slug c≈© ƒë·ªÉ c·∫≠p nh·∫≠t:', err);
        return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t b√†i vi·∫øt." });
    }
    const actualSlug = slug || oldSlugResult[0].slug; // S·ª≠ d·ª•ng slug m·ªõi ho·∫∑c slug c≈© t·ª´ DB
    const finalParams = [title, content, finalThumbnail, author_id, actualSlug, id];


    db.query(sql, finalParams, (err) => {
      if (err) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:', err);
        return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t b√†i vi·∫øt." });
      }
      // N·∫øu c√≥ thumbnail m·ªõi, x√≥a thumbnail c≈© (n·∫øu c√≥ v√† kh√°c v·ªõi thumbnail m·ªõi)
      if (finalThumbnail && finalThumbnail !== oldThumbnail && oldThumbnail) {
        fs.unlink(path.join(UPLOADS_DIR, oldThumbnail), (unlinkErr) => {
          if (unlinkErr) console.error('L·ªói khi x√≥a thumbnail c≈©:', unlinkErr);
        });
      }
      res.json({ message: "‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!" });
    });
  });
};


// ‚úÖ 6. X√≥a b√†i vi·∫øt
export const deletePost = (req, res) => {
  const { id } = req.params;

  // L·∫•y t√™n thumbnail tr∆∞·ªõc khi x√≥a b√†i vi·∫øt ƒë·ªÉ x√≥a file
  db.query("SELECT thumbnail FROM posts WHERE post_id = ?", [id], (err, results) => {
    if (err) {
      console.error('L·ªói khi l·∫•y thumbnail b√†i vi·∫øt ƒë·ªÉ x√≥a:', err);
      return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi x√≥a b√†i vi·∫øt." });
    }
    if (results.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ x√≥a." });
    }

    const thumbnailToDelete = results[0].thumbnail;

    db.query("DELETE FROM posts WHERE post_id = ?", [id], (err, dbResult) => {
      if (err) {
        console.error('L·ªói khi x√≥a b√†i vi·∫øt t·ª´ DB:', err);
        return res.status(500).json({ message: "L·ªói m√°y ch·ªß khi x√≥a b√†i vi·∫øt." });
      }
      if (dbResult.affectedRows === 0) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ x√≥a." });
      }
      // X√≥a file thumbnail sau khi x√≥a th√†nh c√¥ng trong DB
      if (thumbnailToDelete) {
        fs.unlink(path.join(UPLOADS_DIR, thumbnailToDelete), (unlinkErr) => {
          if (unlinkErr) console.error('L·ªói khi x√≥a file thumbnail:', unlinkErr);
        });
      }
      res.json({ message: "üóëÔ∏è X√≥a b√†i vi·∫øt th√†nh c√¥ng!" });
    });
  });
};