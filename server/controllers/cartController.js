// üìÅ controllers/cartController.js
import { db } from "../config/connectBD.js";

// ‚úÖ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
export const getCartItems = (req, res) => {
  const { user_id } = req.params;

  const sql = `
    SELECT
      c.quantity,
      p.product_id,
      p.name,
      CAST(p.price AS DECIMAL(10, 2)) AS price,
      p.thumbnail -- L·∫•y t√™n file ·∫£nh
    FROM cart c -- ƒê·∫£m b·∫£o t√™n b·∫£ng l√† 'cart' ho·∫∑c s·ª≠a th√†nh 'cart_items' n·∫øu kh√°c
    JOIN products p ON c.product_id = p.product_id
    WHERE c.user_id = ?
  `;

  db.query(sql, [user_id], (err, result) => {
    if (err) {
      console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", err);
      return res
        .status(500)
        .json({ error: "L·ªói server", details: err.message });
    }
    const cartItems = result.map((item) => ({
      ...item,
      quantity: parseInt(item.quantity, 10), // Chuy·ªÉn ƒë·ªïi quantity th√†nh s·ªë nguy√™n
      price: parseFloat(item.price), // Chuy·ªÉn ƒë·ªïi price th√†nh s·ªë th·ª±c
      thumbnail: item.thumbnail || "", // ‚úÖ ƒê·∫£m b·∫£o thumbnail l√† chu·ªói r·ªóng n·∫øu null/undefined
    }));
    res.json(cartItems);
  });
};

// ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
export const updateCartItemQuantity = (req, res) => {
  const { user_id, product_id } = req.params;
  const { quantity } = req.body;

  if (isNaN(quantity) || quantity < 0) {
    return res.status(400).json({ error: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá" });
  }

  const sql =
    "UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?"; // ƒê·∫£m b·∫£o t√™n b·∫£ng l√† 'cart'
  db.query(sql, [quantity, user_id, product_id], (err) => {
    if (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
      return res
        .status(500)
        .json({ error: "L·ªói server", details: err.message });
    }
    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng" });
  });
};

// ‚úÖ Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const removeCartItem = (req, res) => {
  const { user_id, product_id } = req.params;

  const sql = "DELETE FROM cart WHERE user_id = ? AND product_id = ?"; // ƒê·∫£m b·∫£o t√™n b·∫£ng l√† 'cart'
  db.query(sql, [user_id, product_id], (err) => {
    if (err) {
      console.error("L·ªói khi xo√° s·∫£n ph·∫©m:", err);
      return res
        .status(500)
        .json({ error: "L·ªói server", details: err.message });
    }
    res.json({ message: "‚úÖ Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng" });
  });
};

// ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = (req, res) => {
  const { user_id, product_id, quantity } = req.body;
  if (!user_id || !product_id || isNaN(quantity) || quantity < 1) {
    return res.status(400).json({
      error: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ho·∫∑c s·ªë l∆∞·ª£ng h·ª£p l·ªá",
    });
  }

  const checkSql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?"; // ƒê·∫£m b·∫£o t√™n b·∫£ng l√† 'cart'
  db.query(checkSql, [user_id, product_id], (err, result) => {
    if (err) {
      console.error("L·ªói khi ki·ªÉm tra gi·ªè h√†ng:", err);
      return res
        .status(500)
        .json({ error: "L·ªói server", details: err.message });
    }
    if (result.length > 0) {
      const updateSql =
        "UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?"; // ƒê·∫£m b·∫£o t√™n b·∫£ng l√† 'cart'
      db.query(updateSql, [quantity, user_id, product_id], (err) => {
        if (err) {
          console.error(
            "L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng:",
            err
          );
          return res
            .status(500)
            .json({ error: "L·ªói server", details: err.message });
        }
        return res.json({
          message: "‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng th√†nh c√¥ng",
        });
      });
    } else {
      const insertSql =
        "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)"; // ƒê·∫£m b·∫£o t√™n b·∫£ng l√† 'cart'
      db.query(insertSql, [user_id, product_id, quantity], (err) => {
        if (err) {
          console.error("L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng:", err);
          return res
            .status(500)
            .json({ error: "L·ªói server", details: err.message });
        }
        return res.json({
          message: "‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng",
        });
      });
    }
  });
};